import asyncio
import random
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.client.default import DefaultBotProperties


TOKEN = '8039911697:AAFjRB6NZM6zqBeuTBAclOyTELwZGMTp11k'

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()
ideas = [
    {"text": "–í—ñ–¥–∫—Ä–∏—Ç–∏ –º–æ–±—ñ–ª—å–Ω–∏–π –¥–æ–¥–∞—Ç–æ–∫ –¥–ª—è –æ–±–º—ñ–Ω—É –∫–Ω–∏–≥–∞–º–∏", "category": "–û—Å–≤—ñ—Ç–∞", "trend": True},
    {"text": "–í–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ –µ–∫–æ-–ø–∞–∫—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ–≤", "category": "–ï–∫–æ-–±—ñ–∑–Ω–µ—Å", "trend": True},
    {"text": "–§—É–¥—Ç—Ä–∞–∫ –∑—ñ –∑–¥–æ—Ä–æ–≤–æ—é —ó–∂–µ—é", "category": "–á–∂–∞", "trend": False},
    {"text": "–û–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω –∫–∞—Å—Ç–æ–º–Ω–æ—ó –º–æ–¥–∏", "category": "–ú–æ–¥–∞", "trend": True},
    {"text": "–û—Ä–µ–Ω–¥–∞ smart-–Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ", "category": "–ù–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å", "trend": False},
    {"text": "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –º—ñ–∫—Ä–æ-–∫—É—Ä—Å—ñ–≤ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ—ó –æ—Å–≤—ñ—Ç–∏", "category": "–û—Å–≤—ñ—Ç–∞", "trend": True},
]

user_profiles = {}  # user_id: {settings, saved_ideas}
suggested_ideas = []  # –¥–ª—è –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö —ñ–¥–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏

def main_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ó–Ω–∞–π—Ç–∏ —ñ–¥–µ—é", callback_data="find_idea")],
        [InlineKeyboardButton(text="üß† –ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ —ñ–¥–µ—é", callback_data="suggest_idea")],
        [InlineKeyboardButton(text="üìä –¢—Ä–µ–Ω–¥–æ–≤—ñ —ñ–¥–µ—ó", callback_data="trending_ideas")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="settings")]
    ])
    return keyboard

def category_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì± –¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó", callback_data="category_–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó")],
        [InlineKeyboardButton(text="üåø –ï–∫–æ-–±—ñ–∑–Ω–µ—Å", callback_data="category_–ï–∫–æ-–±—ñ–∑–Ω–µ—Å")],
        [InlineKeyboardButton(text="üçî –á–∂–∞", callback_data="category_–á–∂–∞")],
        [InlineKeyboardButton(text="üëï –ú–æ–¥–∞", callback_data="category_–ú–æ–¥–∞")],
        [InlineKeyboardButton(text="üè† –ù–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å", callback_data="category_–ù–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å")],
        [InlineKeyboardButton(text="üìö –û—Å–≤—ñ—Ç–∞", callback_data="category_–û—Å–≤—ñ—Ç–∞")]
    ])
    return keyboard

def save_idea_button():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ —ñ–¥–µ—é", callback_data="save_idea")]
    ])
    return keyboard

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_profiles.setdefault(message.from_user.id, {"saved_ideas": [], "settings": {"format": "short"}})
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø –ë–æ—Ç, —è–∫–∏–π —â–æ–¥–Ω—è –≥–µ–Ω–µ—Ä—É—î –∫—Ä–µ–∞—Ç–∏–≤–Ω—ñ –±—ñ–∑–Ω–µ—Å-—ñ–¥–µ—ó üíº\n–û–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ, —â–æ–± –ø–æ—á–∞—Ç–∏ ‚¨áÔ∏è", reply_markup=main_menu())

@dp.message(Command("idea"))
async def cmd_idea(message: types.Message):
    idea = random.choice(ideas)
    user_profiles[message.from_user.id]["last_idea"] = idea
    await message.answer(f"–Ü–¥–µ—è: {idea['text']}", reply_markup=save_idea_button())

@dp.message(Command("category"))
async def cmd_category(message: types.Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=category_menu())

@dp.message(Command("trending"))
async def cmd_trending(message: types.Message):
    trending = [i for i in ideas if i["trend"]]
    text = "\n".join([f"{idx+1}. {i['text']}" for idx, i in enumerate(trending)])
    await message.answer(f"–¢—Ä–µ–Ω–¥–æ–≤—ñ —ñ–¥–µ—ó:\n{text}")

@dp.message(Command("saveidea"))
async def cmd_saveidea(message: types.Message):
    idea = user_profiles.get(message.from_user.id, {}).get("last_idea")
    if idea:
        user_profiles[message.from_user.id]["saved_ideas"].append(idea)
        await message.answer("–Ü–¥–µ—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ ‚úÖ")
    else:
        await message.answer("–ù–µ–º–∞—î —ñ–¥–µ—ó –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è ‚ùå")

@dp.message(Command("myideas"))
async def cmd_myideas(message: types.Message):
    saved = user_profiles.get(message.from_user.id, {}).get("saved_ideas", [])
    if saved:
        text = "\n".join([f"- {i['text']}" for i in saved])
        await message.answer(f"–í–∞—à—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —ñ–¥–µ—ó:\n{text}")
    else:
        await message.answer("–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —ñ–¥–µ–π.")

@dp.message(Command("settings"))
async def cmd_settings(message: types.Message):
    await message.answer("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ üõ†")

@dp.message(Command("suggestidea"))
async def cmd_suggestidea(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—é —ñ–¥–µ—é —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

@dp.message(F.reply_to_message)
async def handle_reply(message: types.Message):
    if message.reply_to_message and "–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—é —ñ–¥–µ—é" in message.reply_to_message.text:
        suggested_ideas.append({"user": message.from_user.id, "text": message.text})
        await message.answer("–î—è–∫—É—î–º–æ! –í–∞—à–∞ —ñ–¥–µ—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é ‚úÖ")

@dp.callback_query()
async def callback_handler(callback: types.CallbackQuery):
    data = callback.data
    user_id = callback.from_user.id

    if data == "find_idea":
        idea = random.choice(ideas)
        user_profiles[user_id]["last_idea"] = idea
        await callback.message.answer(f"–Ü–¥–µ—è: {idea['text']}", reply_markup=save_idea_button())

    elif data == "save_idea":
        idea = user_profiles.get(user_id, {}).get("last_idea")
        if idea:
            user_profiles[user_id]["saved_ideas"].append(idea)
            await callback.message.answer("–Ü–¥–µ—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ ‚úÖ")
        else:
            await callback.message.answer("–ù–µ–º–∞—î —ñ–¥–µ—ó –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è ‚ùå")

    elif data == "trending_ideas":
        trending = [i for i in ideas if i["trend"]]
        text = "\n".join([f"{idx+1}. {i['text']}" for idx, i in enumerate(trending)])
        await callback.message.answer(f"–¢—Ä–µ–Ω–¥–æ–≤—ñ —ñ–¥–µ—ó:\n{text}")

    elif data == "suggest_idea":
        await callback.message.answer("–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—é —ñ–¥–µ—é —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

    elif data == "settings":
        await callback.message.answer("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ üõ†")

    elif data.startswith("category_"):
        category = data.split("_")[1]
        filtered = [i for i in ideas if i["category"] == category]
        if filtered:
            idea = random.choice(filtered)
            await callback.message.answer(f"–Ü–¥–µ—è –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó {category}: {idea['text']}")
        else:
            await callback.message.answer("–ù–µ–º–∞—î —ñ–¥–µ–π —É —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.")

    await callback.answer()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")
